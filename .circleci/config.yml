version: 2.1

parameters:
  docker-image-name:
    type: string
    default: "seccdc/flexo"

            
jobs:
  build:
    docker:
      - image: cimg/go:1.16.6
    steps:
      - checkout
      - run:
          name: Build flexo
          command: |
            CGO_ENABLED=0 go build -a -ldflags "-s -w -extldflags '-static'" -o ./flexo.bin
      # persist the built binary
      - persist_to_workspace:
          root: /home/circleci/project/   # TODO: redundant
          paths:
            - flexo.bin

  lint:
    docker:
      - image: cimg/go:1.16.6
    steps:
      - checkout
      - run:
          name: Install and Run Go Linter
          command: |
            # add GOPATH to default path
            export GOPATH=$(go env GOPATH)
            export PATH=$PATH:$GOPATH
            # binary will be $(go env GOPATH)/bin/golangci-lint
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.41.1
            # run the linter
            golangci-lint run --disable-all -E govet,gosimple

  test:
    docker:
      - image: cimg/go:1.16.6
    steps:
      - checkout
      - attach_workspace:               # attaches the built binary
          at: /home/circleci/project/   # TODO: redundant.
      # the project has no test cases for source code
      # maybe setup postgres and perform smoke tests instead ?
      - run: echo "todo docker-compose (change the executor ?)"


  # TODO: cache go modules to speed up pushing
  push:
    # NOTE: did not use the 'docker' executor because setup_remote_docker had a problem
    machine: true
    environment:
      IMG_NAME: << pipeline.parameters.docker-image-name >>
    steps:
      - checkout
      # - setup_remote_docker:
      #     docker_layer_caching: false
      #     version: "20.10.2"
      - run:
          name: Install AWS CLI through curl
          command: |
            # see https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
      - run:
          name: Build docker image
          command: |
            # ECR_REGISTRY is an envvar registered within circleci settings
            pass=$(aws ecr get-login-password)
            echo $pass | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker build -t $IMG_NAME .
            docker images
            TAG=$(git describe --abbrev=0 --tags)  # get the latest tag from current branch
            docker tag $IMG_NAME:latest $ECR_REGISTRY/$IMG_NAME:$TAG
            docker push $ECR_REGISTRY/$IMG_NAME:$TAG

  deploy-to-eks:
    docker:
      - image: amazon/aws-cli:latest
    environment:
      IMG_NAME: << pipeline.parameters.docker-image-name >>
    steps:
      - checkout
      - run:
          name: Install git
          command: yum install -y git
      # checking-out w/ git submodules
      # see https://circleci.com/docs/2.0/configuration-reference/?section=configuration#checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: Install kubectl v1.21
          command: |
            # instructions: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-binary-with-curl-on-linux
            curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl"
            # validate signatures
            curl -LO "https://dl.k8s.io/release/v1.21.0/bin/linux/amd64/kubectl.sha256"
            echo "$(<kubectl.sha256) kubectl" | sha256sum --check
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Deploy EKS cluster
          working_directory: eks-cloudformation   # a git submodule
          no_output_timeout: 30m
          command: |
            # credits: github.com/weibeld/eks-cloudformation
            ./up.sh \
              --num-worker-nodes 2 \
              --worker-nodes-instance-type t2.small \
              --stack-name eks-cluster \
              --key-pair-name udacity-nd-proj3 \
              --update-kubectl-context
      - run:
          name: Deploy our application
          command: |
            aws eks update-kubeconfig --name eks-cluster    # TODO: hard-coded cluster/stack name
            kubectl apply -f deployment-pg.yaml
            kubectl get deployments
            # update mechanism: use git to source the latest tag and pass it to k8s
            # get the latest tag from main branch and pass it to kubernetes
            # this should trigger a rolling update release if the tag is new
            LATEST_TAG=$(git describe --abbrev=0 --tags)  # get the latest tag from current branch (main)
            kubectl apply -f deployment.yaml
            kubectl set image deployment flexo-dep flexo=$ECR_REGISTRY/$IMG_NAME:$LATEST_TAG
            kubectl get deployments

workflows:
  default:
    jobs:
      # - lint
      # - build
      # - test:
      #     requires: [build]
      - push
      # - push:
      #     requires: [test]
      - deploy-to-eks:
          # requires: [test, push]
          requires: [push]
          filters:
            branches:
              only: [deployment-strategy]
